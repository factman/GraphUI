{"version":3,"sources":["GraphUI.js"],"names":["root","GraphUIUtilities","[object Object]","link","name","downloadLink","document","createElement","download","href","innerHTML","target","body","appendChild","click","remove","data","mimeType","window","URL","webkitURL","fileBlob","Blob","type","createObjectURL","getElementById","ele","val","num","values","split","valLength","length","a","b","Math","floor","end","start","str","x","substring","join","pad","push","arr","sum","forEach","arrs","labels","Object","keys","newData","undefined","includes","map","d","Number","trim","getMaxLength","padArray","$ev","this","timer","clearTimeout","label","getAttribute","value","clientX","y","clientY","tipCon","style","top","left","opacity","setTimeout","vals","Array","apply","sort","increment","getIncrement","decrement","getDecrement","NegativeValue","positiveString","toString","replace","GraphUIFactory","elementId","height","backgroundColor","gridColor","textColor","lineColor","nodeColor","nodeStroke","precision","prefix","suffix","horizontalGrids","showHorizontalGrids","showVerticalGrids","showYAxisLabel","showXAxisLabel","showInlineLabel","inlineLabelColor","showInlineLabelValueOnly","enableLiveEdit","enableOptionDropdown","dropdownOptions","showTable","tableBackgroundColor","tableTextColor","utility","element","console","error","Error","parseData","yLabel","offset","xLabel","node","radius","stroke","padding","bottom","right","canvasHeight","tableHeight","graphOptionsObject","IMAGE","action","graphExport","bind","CSV","JSON","display","parseOptions","addEventListener","render","renderToolTips","id","columnLength","head","rows","row","index","col","formatValue","sumArray","item","oldHeight","oldWidth","width","oldShowTable","toFixed","canvasRatio","svg","canvas","canvasStage","getContext","image","Image","onload","drawImage","toBlob","blob","url","downloadFile","Date","getTime","src","encodeURIComponent","outerHTML","csvString","convertToCSV","convertToObjectURL","jsonString","stringify","key","$event","exportImage","exportJSON","exportCSV","warn","toUpperCase","options","output","optionList","assign","thousandSeparator","getValues","max","getMaxValue","min","getMinValue","unit","currentLabel","texts","maxValue","percentageValue","getYLabels","labelCount","usableHeight","positiveMin","toPositive","grid","setAttribute","rect","pointY","getPointYAxis","line","text","getXLabels","usableWidth","pointX","getPointXAxis","xCoords","yCoords","group","vLine","hLine","state","fill","getElementsByClassName","e","showToolTips","setNodeState","hideToolTips","button","dropdown","dropdownItem","live","panel","generateLivePanel","generateOptionPanel","tagName","styles","format","tags","generateMultipleTags","total","generateTableBodyRows","generateTableHead","generateTableBody","clientWidth","dom","DOMParser","tableElement","parseFromString","generateTable","children","getElementsByTagName","clientHeight","generateYGrids","generateXGrids","drawGraph","drawNodes","graph","append","initOptionsPanel","svgElements","lastElementChild","initToolTips","GraphUI","toSource","prototype","module","exports"],"mappings":"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","file":"GraphUI.min.js","sourcesContent":["/**\n * Copyright: 2019 - GraphUI\n *\n * License: MIT\n *\n * long description for the file\n *\n * @summary short description for the file\n * @author Mohammed Odunayo <factman60@gmail.com>\n *\n * Created at     : 2019-03-10 23:12:28 \n * Last modified  : 2019-03-11 02:15:24\n */\n\n\n!(function (root) {\n  \"use strict\";\n\n  /**\n   * The utility class for GraphUI which contain static functions.\n   * @class GraphUIUtilities\n   */\n  class GraphUIUtilities {\n\n    /**\n     * Generates a download link for files and perform a click function to start the file download.\n     * @param {String} link Object URL from Window.URL.createObjectURL()\n     * @param {String} name Filename.\n     * @returns {void}\n     */\n    static downloadFile(link, name) {\n      const downloadLink = document.createElement(\"a\");\n      downloadLink.download = name;\n      downloadLink.href = link;\n      downloadLink.innerHTML = name;\n      downloadLink.target = \"_blank\";\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      downloadLink.remove();\n    }\n\n    /**\n     * Convert string of data into a file blob and return the object url of the blob.\n     * @param {String} data String from a stream of data.\n     * @param {String} mimeType File mime-type.\n     * @returns {String}\n     */\n    static convertToObjectURL(data, mimeType) {\n      window.URL = window.URL || window.webkitURL;\n      const fileBlob = new Blob([data], { type: mimeType });\n      return URL.createObjectURL(fileBlob);\n    }\n\n    /**\n     * Generates tooltip DOM template and append it to the html document body tag.\n     * @returns {void}\n     */\n    static renderToolTips() {\n      if (document.getElementById(\"GraphUI-toolTips-con\") === null) {\n        const ele = document.createElement(\"div\");\n        ele.innerHTML = `\n          <div id=\"GraphUI-toolTips-con\">\n            <p id=\"GraphUI-toolTips-head\"></p>\n            <p id=\"GraphUI-toolTips-text\"></p>\n          </div>\n        `;\n        document.body.appendChild(ele);\n      }\n    }\n\n    /**\n     * Increase numbers.\n     * @param {Number} val Number to be increase.\n     * @returns {Number}\n     */\n    static getIncrement(val) {\n      let num = 1;\n\n      if (val > 10) num = 1;\n      if (val > 100) num = 10;\n      if (val > 1000) num = 100;\n      if (val > 10000) num = 1000;\n      if (val > 100000) num = 10000;\n      if (val > 1000000) num = 100000;\n      if (val > 10000000) num = 1000000;\n\n      return num;\n    }\n\n    /**\n     * Decrease Numbers.\n     * @param {Number} val Number to decrease.\n     * @returns {Number}\n     */\n    static getDecrement(val) {\n      let num = -1;\n\n      if (val < -10) num = -1;\n      if (val < -100) num = -10;\n      if (val < -1000) num = -100;\n      if (val < -10000) num = -1000;\n      if (val < -100000) num = -10000;\n      if (val < -1000000) num = -100000;\n      if (val < -10000000) num = -1000000;\n\n      return num;\n    }\n\n    /**\n     * Add thousand separator (,) to string of numbers greater than or equals a thousand.\n     * @param {String} val String of number to add the thousand separator.\n     * @returns {String}\n     */\n    static thousandSeparator(val) {\n      const values = val.split(\".\");\n      const valLength = values[0].length;\n      const a = (valLength / 3);\n      let b = Math.floor(valLength / 3);\n\n      if ((a >= 1 && a > b) || (a >= 1 && a === b)) {\n        if (a === b) b -= 1;\n        let end = valLength;\n        let start = 0;\n        let str = \"\";\n        for (let x = 0; x < b; x += 1) {\n          start = end - 3;\n          str = `,${values[0].substring(start, end)}${str}`;\n          end -= 3;\n        }\n        if (b > 0) values[0] = values[0].substring(0, start) + str;\n      }\n\n      return values.join(\".\");\n    }\n\n    /**\n     * Increase the length of an array to the specified length.\n     * @param {Array<Number>} val Array of integers to pad to equal length.\n     * @param {Number} length New Length for the array.\n     * @returns {Array<Number>}\n     */\n    static padArray(val, length) {\n      if (typeof val === \"object\") {\n        if (val.length < length) {\n          const pad = length - val.length;\n          for (let x = 1; x <= pad; x += 1) {\n            val.push(0);\n          }\n        }\n      } else if (typeof val === \"number\" || typeof val === \"string\") {\n        return [val];\n      }\n      return val;\n    }\n\n    /**\n     * Add all value of an array and return the sum\n     * @param {Array<Number>} arr Array of integer to sum.\n     * @returns {Number}\n     */\n    static sumArray(arr) {\n      let sum = 0;\n      arr.forEach((val) => {\n        sum += val;\n      });\n      return sum;\n    }\n\n    /**\n     * Get and return the length of the array with the greatest length.\n     * @param {Array<Array>} arrs Array of arrays\n     * @returns {Number}\n     */\n    static getMaxLength(arrs) {\n      let length = 0;\n      arrs.forEach((arr) => {\n        if (typeof arr === \"object\") {\n          if (length < arr.length) {\n            length = arr.length;\n          }\n        }\n      });\n      return length;\n    }\n\n    /**\n     * Parse the value of object and return a correctly formatted data.\n     * @param {Object} data Object of data to parse.\n     * @returns {Object}\n     */\n    static parseData(data) {\n      const labels = Object.keys(data);\n      const newData = {};\n\n      labels.forEach((val) => {\n        switch (typeof data[val]) {\n        case \"object\":\n          if (data[val].length !== undefined) {\n            newData[val] = data[val];\n          } else {\n            newData[val] = [0];\n          }\n          break;\n        case \"number\":\n          newData[val] = [data[val]];\n          break;\n        case \"string\":\n          if (data[val].includes(\",\")) {\n            newData[val] = data[val].split(\",\").map(d => Number(d.trim()) || 0);\n          } else {\n            newData[val] = [Number(data[val]) || 0];\n          }\n          break;\n        default:\n          newData[val] = [Number(data[val]) || 0];\n        }\n      });\n\n      const values = Object.values(newData);\n      const length = GraphUIUtilities.getMaxLength(values);\n      values.map(val => GraphUIUtilities.padArray(val, length));\n\n      return newData;\n    }\n\n    /**\n     * Display the tooltip element.\n     * @param {MouseEvent} $ev Mouse event object.\n     * @returns {void}\n     */\n    static showToolTips($ev) {\n      if (this.timer) clearTimeout(this.timer);\n\n      const label = $ev.target.getAttribute(\"data-label\");\n      const value = $ev.target.getAttribute(\"data-value\");\n      const type = $ev.target.getAttribute(\"data-type\");\n      const x = $ev.clientX;\n      const y = $ev.clientY;\n\n      const tipCon = document.getElementById(\"GraphUI-toolTips-con\");\n      document.getElementById(\"GraphUI-toolTips-head\").innerHTML = label;\n      document.getElementById(\"GraphUI-toolTips-text\").innerHTML = type ? value : `Value: ${value}`;\n\n      tipCon.style.top = `${y + -35}px`;\n      tipCon.style.left = `${x + 25}px`;\n      tipCon.style.opacity = \"0.7\";\n    }\n\n    /**\n     * Hide the tooltip element.\n     * @returns {void}\n     */\n    static hideToolTips() {\n      this.timer = setTimeout(() => {\n        const tipCon = document.getElementById(\"GraphUI-toolTips-con\");\n        tipCon.style.opacity = \"0\";\n        tipCon.style.left = \"-100px\";\n        document.getElementById(\"GraphUI-toolTips-head\").innerHTML = \"\";\n        document.getElementById(\"GraphUI-toolTips-text\").innerHTML = \"\";\n      }, 500);\n    }\n\n    /**\n     * Get and return the greatest value of an array.\n     * @param {Array<Number>} vals Array of numbers.\n     * @returns {Number}\n     */\n    static getMaxValue(vals) {\n      const values = Array.apply([], vals);\n      values.sort((a, b) => a - b);\n      const increment = GraphUIUtilities.getIncrement(values[values.length - 1]);\n      return values[values.length - 1] + increment;\n    }\n\n    /**\n     * Get and return the smallest value of an array.\n     * @param {Array<Number>} vals Array of numbers.\n     * @returns {Number}\n     */\n    static getMinValue(vals) {\n      const values = Array.apply([], vals);\n      values.sort((a, b) => a - b);\n      const decrement = GraphUIUtilities.getDecrement(values[0]);\n      return (values[0] < 0) ? values[0] + decrement : 0;\n    }\n\n    /**\n     * Convert negative numbers to positive integers.\n     * @param {Number} NegativeValue A negative number.\n     * @returns {Number}\n     */\n    static toPositive(NegativeValue) {\n      if (NegativeValue < 0) {\n        const positiveString = NegativeValue.toString().replace(\"-\", \"\");\n        return Number(positiveString);\n      }\n      return NegativeValue;\n    }\n\n  }\n\n  /**\n   * The factory class for GraphUI which contain all the logic for plotting the graph.\n   * @class GraphUIFactory\n   */\n  class GraphUIFactory {\n\n    /**\n     * GraphUIFactory constructor.\n     * @param {Object} param0 Options object for plotting the graph.\n     * @constructor\n     */\n    constructor({\n      elementId, height, backgroundColor, gridColor, textColor, lineColor,\n      nodeColor, nodeStroke, precision, prefix, suffix, data, horizontalGrids,\n      showHorizontalGrids, showVerticalGrids, showYAxisLabel, showXAxisLabel,\n      showInlineLabel, inlineLabelColor, showInlineLabelValueOnly, enableLiveEdit,\n      enableOptionDropdown, dropdownOptions, showTable, tableBackgroundColor, tableTextColor\n    } = {}) {\n\n      this.utility = GraphUIUtilities;\n\n      this.element = document.getElementById(elementId || \"graph\");\n\n      if (!this.element) {\n        // eslint-disable-next-line no-console\n        console.error(\"GraphUI: Invalid \\\"elementId\\\" option specified.\");\n        return Error(\"GraphUI: Invalid \\\"elementId\\\" option specified.\");\n      }\n\n      if (typeof data === \"object\" && data.length === undefined) {\n        this.data = this.utility.parseData(data);\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\"GraphUI: Invalid \\\"data\\\" option specified.\");\n        return Error(\"GraphUI: Invalid \\\"data\\\" option specified.\");\n      }\n\n      this.height = height;\n\n      this.backgroundColor = backgroundColor;\n      this.gridColor = gridColor;\n      this.textColor = textColor;\n      this.lineColor = lineColor;\n      this.nodeColor = nodeColor || this.backgroundColor;\n      this.nodeStroke = nodeStroke || this.lineColor;\n      this.precision = precision;\n      this.prefix = prefix;\n      this.suffix = suffix;\n      this.horizontalGrids = horizontalGrids;\n      this.showHorizontalGrids = showHorizontalGrids;\n      this.showVerticalGrids = showVerticalGrids;\n      this.showYAxisLabel = showYAxisLabel;\n      this.showXAxisLabel = showXAxisLabel;\n      this.showInlineLabel = showInlineLabel;\n      this.showInlineLabelValueOnly = showInlineLabelValueOnly;\n      this.inlineLabelColor = inlineLabelColor || this.textColor;\n      this.enableLiveEdit = enableLiveEdit;\n      this.enableOptionDropdown = enableOptionDropdown;\n      this.showTable = showTable;\n      this.tableBackgroundColor = tableBackgroundColor;\n      this.tableTextColor = tableTextColor;\n\n      this.yLabel = { start: 80, offset: 5 };\n      this.xLabel = { start: 50, offset: 30 };\n      this.node = { radius: 6, stroke: 1.2 };\n      this.padding = {\n        top: 50, bottom: 50, left: 90, right: 20\n      };\n      this.canvasHeight = null;\n      this.tableHeight = 0;\n      this.graphOptionsObject = {\n        IMAGE: { label: \"Export Image\", action: this.graphExport.bind(this, \"IMAGE\") },\n        CSV: { label: \"Export CSV\", action: this.graphExport.bind(this, \"CSV\") },\n        JSON: { label: \"Export JSON\", action: this.graphExport.bind(this, \"JSON\") }\n      };\n\n      this.element.style.display = \"flex\";\n      this.dropdownOptions = this.parseOptions(dropdownOptions);\n\n      window.addEventListener(\"resize\", this.render.bind(this));\n\n      this.utility.renderToolTips();\n      this.render();\n\n      return {\n        elementId: this.element.id,\n        height: this.height,\n        backgroundColor: this.backgroundColor,\n        gridColor: this.gridColor,\n        textColor: this.textColor,\n        lineColor: this.lineColor,\n        nodeColor: this.nodeColor,\n        nodeStroke: this.nodeStroke,\n        precision: this.precision,\n        prefix: this.prefix,\n        suffix: this.suffix,\n        data: this.data,\n        horizontalGrids: this.horizontalGrids,\n        showHorizontalGrids: this.showHorizontalGrids,\n        showVerticalGrids: this.showVerticalGrids,\n        showYAxisLabel: this.showYAxisLabel,\n        showXAxisLabel: this.showXAxisLabel,\n        showInlineLabel: this.showInlineLabel,\n        inlineLabelColor: this.inlineLabelColor,\n        showInlineLabelValueOnly: this.showInlineLabelValueOnly,\n        enableLiveEdit: this.enableLiveEdit,\n        enableOptionDropdown: this.enableOptionDropdown,\n        dropdownOptions: dropdownOptions === undefined\n          ? Object.keys(this.graphOptionsObject)\n          : dropdownOptions,\n        showTable: this.showTable,\n        tableBackgroundColor: this.tableBackgroundColor,\n        tableTextColor: this.tableTextColor\n      };\n\n    }\n\n    /**\n     * Convert an object to a CSV string.\n     * @param {Object} data Object to convert to CSV.\n     * @returns {String}\n     */\n    convertToCSV(data) {\n      const values = Object.values(data);\n      const columnLength = this.utility.getMaxLength(values);\n      const labels = Object.keys(data);\n      let head = \"\";\n      const rows = [];\n\n      if (columnLength > 1) {\n        head += \"\\\"Labels\\\"\";\n        for (let x = 1; x <= columnLength; x += 1) {\n          head += `,\"Data ${x}\"`;\n        }\n        head += \",\\\"Total\\\"\";\n        values.forEach((row, index) => {\n          let str = `\"${labels[index]}\"`;\n          row.forEach((col) => {\n            str += `,\"${this.formatValue(col)}\"`;\n          });\n          str += `,\"${this.formatValue(this.utility.sumArray(row))}\"`;\n          rows.push(str);\n        });\n      } else {\n        head += \"\\\"Labels\\\"\";\n        labels.forEach((item) => {\n          head += `,\"${item}\"`;\n        });\n        let str = \"\\\"Data\\\"\";\n        values.forEach((col) => {\n          str += `,\"${this.formatValue(col)}\"`;\n        });\n        rows.push(str);\n      }\n\n      head += \"\\r\\n\";\n      const body = rows.join(\"\\r\\n\");\n\n      return head + body;\n    }\n\n    /**\n     * Generate a PNG image file from the graph data using SVG image and canvas object.\n     * @returns {void}\n     */\n    exportImage() {\n      const oldHeight = this.height;\n      const oldWidth = this.width;\n      const oldShowTable = this.showTable;\n      const ratio = oldWidth / oldHeight;\n      const width = 1000;\n      const height = Number((width / ratio).toFixed(2));\n      this.width = width;\n      this.height = height;\n      this.showTable = true;\n      const canvasRatio = this.width / (this.height + this.tableHeight + (this.tableHeight / 4.5));\n      this.canvasHeight = (this.width / canvasRatio).toFixed(2);\n      const svg = this.render(false);\n      const canvas = document.createElement(\"canvas\");\n      const canvasStage = canvas.getContext(\"2d\");\n      const image = new Image();\n\n      canvas.width = this.width;\n      canvas.height = this.canvasHeight;\n\n      image.onload = () => {\n        canvasStage.drawImage(image, 0, 0);\n        canvas.toBlob((blob) => {\n          const url = URL.createObjectURL(blob);\n          this.utility.downloadFile(url, `Export-GraphUI-ImageFile-${new Date().getTime()}.png`);\n        }, \"image/png\", 100);\n      };\n\n      image.src = `data:image/svg+xml,${encodeURIComponent(svg.outerHTML)}`;\n\n      this.height = oldHeight;\n      this.width = oldWidth;\n      this.canvasHeight = null;\n      this.showTable = oldShowTable;\n      this.render();\n    }\n\n    /**\n     * Generate a CSV text file from graph data.\n     * @returns {void}\n     */\n    exportCSV() {\n      const csvString = this.convertToCSV(this.data);\n      const url = this.utility.convertToObjectURL(csvString, \"text/csv\");\n      this.utility.downloadFile(url, `Export-GraphUI-CSVFile-${new Date().getTime()}.csv`);\n    }\n\n    /**\n     * Generate a JSON file from graph data.\n     * @returns {void}\n     */\n    exportJSON() {\n      const jsonString = JSON.stringify(this.data, (key, value) => {\n        if (typeof value === \"number\") return this.formatValue(value);\n        return value;\n      }, 2);\n      const url = this.utility.convertToObjectURL(jsonString, \"application/json\");\n      this.utility.downloadFile(url, `Export-GraphUI-JSONFile-${new Date().getTime()}.json`);\n    }\n\n    /**\n     * Generate a file base on the supplied type using the graph data.\n     * @param {String} type File type to export to.\n     * @param {MouseEvent} $event MouseEvent.\n     * @returns {void}\n     */\n    graphExport(type, $event) {\n      switch (type) {\n      case \"IMAGE\":\n        this.exportImage();\n        break;\n      case \"JSON\":\n        this.exportJSON();\n        break;\n      case \"CSV\":\n        this.exportCSV();\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.warn(`Invalid option '${$event.target.innerHTML}' in ${this.element.id.toUpperCase()}`);\n      }\n    }\n\n    /**\n     * Parse the array of supplied dropdown options and return a dropdown option object.\n     * @param {Array<String> | String} options Array of options to parse.\n     * @returns {Array<Object>}\n     */\n    parseOptions(options) {\n      const output = [];\n      const optionList = Object.keys(this.graphOptionsObject);\n\n      if (typeof options === \"string\" && options.toUpperCase().trim() === \"ALL\") {\n        return Object.values(this.graphOptionsObject);\n      }\n      if (typeof options === \"object\") {\n        options.forEach((item) => {\n          const arr = item.trim().split(\"|\").map(a => a.trim());\n          const key = arr[0].toUpperCase();\n\n          if (arr.length === 1) {\n            if (optionList.includes(key)) {\n              output.push(this.graphOptionsObject[key]);\n            }\n          } else if (arr.length > 1) {\n            if (optionList.includes(key)) {\n              const val = Object.assign({}, this.graphOptionsObject[key]);\n              val.label = arr[1];\n              output.push(val);\n            }\n          }\n        });\n\n        return output;\n      }\n\n      return Object.values(this.graphOptionsObject);\n    }\n\n    /**\n     * Return the values of the graph data object.\n     * @returns {Array<Number>}\n     */\n    getValues() {\n      const values = [];\n      Object.keys(this.data).forEach((key) => {\n        if (typeof this.data[key] === \"object\") {\n          values.push(this.utility.sumArray(this.data[key]));\n        } else {\n          values.push(this.data[key]);\n        }\n      });\n      return values;\n    }\n\n    /**\n     * Formats a giving value based on the graph options.\n     * @param {Number} val Number value to format.\n     * @returns {String}\n     */\n    formatValue(val) {\n      return (\n        this.prefix + this.utility.thousandSeparator(val.toFixed(this.precision)) + this.suffix\n      );\n    }\n\n    /**\n     * Return the YAxis Label of the graph.\n     * @returns {{values: Array<Number>, texts: Array<String>}}\n     */\n    getYLabels() {\n      const values = this.getValues();\n      const max = this.utility.getMaxValue(values);\n      const min = this.utility.getMinValue(values);\n      const unit = Number(((max - min) / this.horizontalGrids).toFixed(2));\n      let currentLabel = min;\n      const labels = {\n        values: [],\n        texts: []\n      };\n      labels.texts.push(this.formatValue(currentLabel));\n      labels.values.push(currentLabel);\n\n      for (let x = 1; x <= this.horizontalGrids; x += 1) {\n        currentLabel += unit;\n        labels.values.push(currentLabel);\n        labels.texts.push(this.formatValue(currentLabel));\n      }\n\n      return labels;\n    }\n\n    /**\n     * Return the labels of the graph XAxis.\n     * @returns {Array<String>}\n     */\n    getXLabels() {\n      return Object.keys(this.data);\n    }\n\n    /**\n     * Return the the accurate point on the YAxis the current value should be plotted.\n     * @param {Number} height Total height to plot.\n     * @param {Number} maxValue Highest Value in the graph.\n     * @param {Number} value The current value to plot.\n     * @returns {Number}\n     */\n    getPointYAxis(height, maxValue, value) {\n      const valuePercentage = (value / maxValue) * 100;\n      const percentageValue = (valuePercentage / 100) * height;\n      return height + this.padding.top - percentageValue;\n    }\n\n    /**\n     * Return the the accurate point on the XAxis the current value should be plotted.\n     * @param {Number} width Total width to plot.\n     * @param {Number} maxValue Highest Value in the graph.\n     * @param {Number} value The current value to plot.\n     * @returns {Number}\n     */\n    getPointXAxis(width, maxValue, value) {\n      const valuePercentage = (value / maxValue) * 100;\n      const percentageValue = (valuePercentage / 100) * width;\n      return this.padding.left + percentageValue + this.padding.right;\n    }\n\n    /**\n     * Generate the group of SVG elements for the graph YAxis grids.\n     * @returns {SVGGElement}\n     */\n    generateYGrids() {\n      const labels = this.getYLabels();\n      const labelCount = labels.values.length;\n      const usableHeight = this.height - this.padding.bottom - this.padding.top;\n      const max = this.utility.getMaxValue(this.getValues());\n      const min = this.utility.getMinValue(this.getValues());\n      const positiveMin = min < 0 ? this.utility.toPositive(min) : min;\n      const grid = document.createElement(\"g\");\n      grid.setAttribute(\"class\", \"graph-svg-group\");\n      const rect = document.createElement(\"rect\");\n      rect.setAttribute(\"x\", \"0\");\n      rect.setAttribute(\"y\", \"0\");\n      rect.setAttribute(\"fill\", this.backgroundColor);\n      rect.setAttribute(\"width\", \"100%\");\n      rect.setAttribute(\"height\", \"100%\");\n      rect.setAttribute(\"stroke-width\", \"0\");\n      grid.appendChild(rect);\n\n      for (let x = 0; x < labelCount; x += 1) {\n        const pointY = this.getPointYAxis(usableHeight, (max + positiveMin), (labels.values[x] + positiveMin));\n        if (this.showHorizontalGrids) {\n          const line = document.createElement(\"line\");\n          line.setAttribute(\"x1\", `${this.padding.left}px`);\n          line.setAttribute(\"y1\", `${pointY}px`);\n          line.setAttribute(\"x2\", `${this.width - this.padding.right}px`);\n          line.setAttribute(\"y2\", `${pointY}px`);\n          line.setAttribute(\"stroke\", `${this.gridColor}`);\n          line.setAttribute(\"stroke-width\", \"2\");\n          grid.appendChild(line);\n        }\n\n        if (this.showYAxisLabel) {\n          const text = document.createElement(\"text\");\n          text.setAttribute(\"x\", `${this.yLabel.start}`);\n          text.setAttribute(\"y\", `${pointY + this.yLabel.offset}px`);\n          text.setAttribute(\"fill\", `${this.textColor}`);\n          text.setAttribute(\"text-anchor\", \"end\");\n          text.innerHTML = x > 0 ? labels.texts[x] : \"\";\n          grid.appendChild(text);\n        }\n      }\n\n      return grid;\n    }\n\n    /**\n     * Generate the group of SVG elements for the graph XAxis grids.\n     * @returns {SVGGElement}\n     */\n    generateXGrids() {\n      const labels = this.getXLabels();\n      const labelCount = labels.length;\n      const usableWidth = this.width - this.padding.left - this.padding.right;\n      const max = labelCount;\n      const grid = document.createElement(\"g\");\n      grid.setAttribute(\"class\", \"graph-svg-group\");\n\n      for (let x = 0; x < labelCount; x += 1) {\n        const pointX = this.getPointXAxis(usableWidth, max, x);\n        if (this.showVerticalGrids) {\n          const line = document.createElement(\"line\");\n          line.setAttribute(\"x1\", `${pointX}px`);\n          line.setAttribute(\"y1\", `${this.padding.top}px`);\n          line.setAttribute(\"x2\", `${pointX}px`);\n          line.setAttribute(\"y2\", `${this.height - this.padding.bottom}px`);\n          line.setAttribute(\"stroke\", `${this.gridColor}`);\n          line.setAttribute(\"stroke-width\", \"2\");\n          grid.appendChild(line);\n        }\n\n        this.xCoords.push(pointX);\n\n        if (this.showXAxisLabel) {\n          const text = document.createElement(\"text\");\n          text.setAttribute(\"x\", `${pointX}`);\n          text.setAttribute(\"y\", `${this.height - this.xLabel.start + this.xLabel.offset}px`);\n          text.setAttribute(\"fill\", `${this.textColor}`);\n          text.setAttribute(\"text-anchor\", \"middle\");\n          text.innerHTML = labels[x];\n          grid.appendChild(text);\n        }\n      }\n\n      return grid;\n    }\n\n    /**\n     * Plots the graph data and return the SVG group of lines plotted.\n     * @returns {SVGGElement}\n     */\n    drawGraph() {\n      const grid = document.createElement(\"g\");\n      grid.setAttribute(\"class\", \"graph-svg-group\");\n      const values = this.getValues();\n      const usableHeight = this.height - this.padding.bottom - this.padding.top;\n      const max = this.utility.getMaxValue(values);\n      const min = this.utility.getMinValue(values);\n      const positiveMin = min < 0 ? this.utility.toPositive(min) : min;\n\n      values.forEach((val, index) => {\n        const line = document.createElement(\"line\");\n        const pointY = this.getPointYAxis(usableHeight, (max + positiveMin), (val + positiveMin));\n        if (index < 1) {\n          line.setAttribute(\"x1\", `${this.xCoords[index]}px`);\n          line.setAttribute(\"y1\", `${pointY}px`);\n          line.setAttribute(\"x2\", `${this.xCoords[index]}px`);\n          line.setAttribute(\"y2\", `${pointY}px`);\n        } else {\n          line.setAttribute(\"x1\", `${this.xCoords[index - 1]}px`);\n          line.setAttribute(\"y1\", `${this.yCoords[index - 1]}px`);\n          line.setAttribute(\"x2\", `${this.xCoords[index]}px`);\n          line.setAttribute(\"y2\", `${pointY}px`);\n        }\n        line.setAttribute(\"stroke\", `${this.lineColor}`);\n        line.setAttribute(\"stroke-width\", \"3\");\n        grid.appendChild(line);\n        this.yCoords.push(pointY);\n      });\n\n      return grid;\n    }\n\n    /**\n     * Generate the node element for the graph, indicating every plotted point on the graph.\n     * @param {Boolean} output \n     * @returns {SVGGElement}\n     */\n    drawNodes(output) {\n      const grid = document.createElement(\"g\");\n      grid.setAttribute(\"class\", \"graph-svg-group graph-node-group\");\n      const label = this.getXLabels();\n      this.getValues().forEach((val, index) => {\n        const group = document.createElement(\"g\");\n        group.setAttribute(\"class\", \"node-group\");\n\n        const vLine = document.createElement(\"line\");\n        vLine.setAttribute(\"x1\", `${this.xCoords[index]}px`);\n        vLine.setAttribute(\"y1\", `${0}px`);\n        vLine.setAttribute(\"x2\", `${this.xCoords[index]}px`);\n        vLine.setAttribute(\"y2\", `${this.height}px`);\n        vLine.setAttribute(\"stroke\", `${this.nodeStroke}`);\n        vLine.setAttribute(\"stroke-width\", \"0.8\");\n        vLine.setAttribute(\"class\", \"node-grid-v\");\n        if (output) group.appendChild(vLine);\n\n        const hLine = document.createElement(\"line\");\n        hLine.setAttribute(\"x1\", `${0}px`);\n        hLine.setAttribute(\"y1\", `${this.yCoords[index]}px`);\n        hLine.setAttribute(\"x2\", `${this.width}px`);\n        hLine.setAttribute(\"y2\", `${this.yCoords[index]}px`);\n        hLine.setAttribute(\"stroke\", `${this.nodeStroke}`);\n        hLine.setAttribute(\"stroke-width\", \"0.8\");\n        hLine.setAttribute(\"class\", \"node-grid-h\");\n        if (output) group.appendChild(hLine);\n\n        if (this.showInlineLabel) {\n          const text = document.createElement(\"text\");\n          text.setAttribute(\"x\", `${this.xCoords[index]}px`);\n          text.setAttribute(\"y\", `${this.yCoords[index] - 15}px`);\n          text.setAttribute(\"fill\", `${this.inlineLabelColor}`);\n          if (index === 0) {\n            text.setAttribute(\"text-anchor\", \"start\");\n          } else if (index === label.length - 1) {\n            text.setAttribute(\"text-anchor\", \"end\");\n          } else {\n            text.setAttribute(\"text-anchor\", \"middle\");\n          }\n          text.setAttribute(\"class\", \"graph-inline-label\");\n          text.innerHTML = `${this.showInlineLabelValueOnly ? \"\" : `${label[index]}:`} ${this.formatValue(val)}`;\n          group.appendChild(text);\n        }\n\n        const node = document.createElement(\"circle\");\n        node.setAttribute(\"cx\", this.xCoords[index]);\n        node.setAttribute(\"cy\", this.yCoords[index]);\n        node.setAttribute(\"r\", this.node.radius);\n        node.setAttribute(\"stroke\", this.nodeStroke);\n        node.setAttribute(\"fill\", this.nodeColor);\n        node.setAttribute(\"stroke-width\", this.node.stroke);\n        node.setAttribute(\"class\", \"circle-node\");\n        node.setAttribute(\"data-label\", label[index]);\n        node.setAttribute(\"data-value\", this.formatValue(val));\n        group.appendChild(node);\n\n        grid.appendChild(group);\n      });\n\n      return grid;\n    }\n\n    /**\n     * Set the properties and attributes of a node element based on its current state.\n     * @param {String} state Current node state.\n     * @param {MouseEvent} $event MouseEvent.\n     * @returns {void}\n     */\n    setNodeState(state, $event) {\n      if (state === \"over\") {\n        $event.target.style.fill = this.lineColor;\n        $event.target.style.stroke = this.backgroundColor;\n      } else if (state === \"out\") {\n        $event.target.style.fill = this.nodeColor;\n        $event.target.style.stroke = this.nodeStroke;\n      }\n    }\n\n    /**\n     * Initialize every node element of a graph by setting event listeners on each node.\n     * @returns {void}\n     */\n    initToolTips() {\n      const groups = Object.values(this.element.getElementsByClassName(\"circle-node\"));\n      groups.forEach((group) => {\n        group.addEventListener(\"mouseover\", (e) => {\n          this.utility.showToolTips(e);\n          this.setNodeState(\"over\", e);\n        });\n        group.addEventListener(\"mouseout\", (e) => {\n          this.utility.hideToolTips(e);\n          this.setNodeState(\"out\", e);\n        });\n      });\n    }\n\n    /**\n     * Generate the graph dropdown HTML element based on the provided option.\n     * @returns {HTMLDivElement}\n     */\n    generateOptionPanel() {\n      const options = document.createElement(\"div\");\n      const button = document.createElement(\"button\");\n      const dropdown = document.createElement(\"ul\");\n\n      button.setAttribute(\"type\", \"button\");\n      button.setAttribute(\"data-label\", \"Graph Menu\");\n      button.setAttribute(\"data-value\", \"Click to select an option.\");\n      button.setAttribute(\"data-type\", \"Button\");\n      button.addEventListener(\"mouseover\", this.utility.showToolTips);\n      button.addEventListener(\"mouseout\", this.utility.hideToolTips);\n      button.innerHTML = \"&Congruent;\";\n\n      this.dropdownOptions.forEach((item) => {\n        const dropdownItem = document.createElement(\"li\");\n        dropdownItem.innerHTML = item.label;\n        dropdownItem.addEventListener(\"click\", item.action);\n        dropdown.appendChild(dropdownItem);\n      });\n\n      options.setAttribute(\"class\", \"graph-panel-options\");\n      options.appendChild(button);\n      if (this.dropdownOptions.length >= 1) options.appendChild(dropdown);\n      return options;\n    }\n\n    /**\n     * Generate the graph live editor HTML element based on provided options.\n     * @todo: Complete the live editor for the graph in the next version.\n     * @returns {HTMLDivElement}\n     */\n    generateLivePanel() {\n      const live = document.createElement(\"div\");\n      const button = document.createElement(\"button\");\n\n      button.setAttribute(\"type\", \"button\");\n      button.setAttribute(\"data-label\", \"Live Edit\");\n      button.setAttribute(\"data-value\", \"Click to edit graph in real time.\");\n      button.setAttribute(\"data-type\", \"Button\");\n      button.addEventListener(\"mouseover\", this.utility.showToolTips);\n      button.addEventListener(\"mouseout\", this.utility.hideToolTips);\n      button.innerHTML = \"&bigvee;\";\n\n      live.setAttribute(\"class\", \"graph-panel-live\");\n      live.appendChild(button);\n      return live;\n    }\n\n    /**\n     * Initialize the graph option dropdown HTML element.\n     * @returns {HTMLDivElement}\n     */\n    initOptionsPanel() {\n      const panel = document.createElement(\"div\");\n      panel.setAttribute(\"class\", \"graph-panel\");\n      panel.style.width = `${this.width}px`;\n      if (this.enableLiveEdit) panel.appendChild(this.generateLivePanel());\n      if (this.enableOptionDropdown) panel.appendChild(this.generateOptionPanel());\n      return panel;\n    }\n\n    /**\n     * Generate multiple tags based on the parameters supplied.\n     * @param {Array<Number> | Number} vals Values to generate a tag for.\n     * @param {String} tagName Name of the HTML tag to generate.\n     * @param {Array<String>} styles Array of CSS properties for styling the generated tag.\n     * @param {String} prefix A string to prepend to the beginning of the tag value.\n     * @param {String} suffix A string to append to the end of the tag value.\n     * @param {Boolean} format Option if to format the value of the tag based on the provided option.\n     * @returns {String}\n     */\n    generateMultipleTags(vals, tagName, styles = [], prefix = \"\", suffix = \"\", format = false) {\n      let tags = \"\";\n\n      if (typeof vals === \"number\") {\n        for (let x = 1; x <= vals; x += 1) {\n          tags += `<${tagName} style=\"${styles.join(\"; \")}\">${prefix}${format ? this.formatValue(x) : x}${suffix}</${tagName}>`;\n        }\n      } else if (typeof vals === \"object\") {\n        vals.forEach((val) => {\n          tags += `<${tagName} style=\"${styles.join(\"; \")}\">${prefix}${format ? this.formatValue(val) : val}${suffix}</${tagName}>`;\n        });\n      }\n\n      return tags;\n    }\n\n    /**\n     * Generate the head section of the graph table.\n     * @returns {String}\n     */\n    generateTableHead() {\n      const columnLength = this.utility.getMaxLength(Object.values(this.data));\n      let head = \"\";\n\n      if (columnLength > 1) {\n        head += `\n          <thead>\n            <tr>\n              <th style=\"border-color: ${this.backgroundColor}\">Labels</th>\n              ${this.generateMultipleTags(columnLength, \"th\", [`border-color: ${this.backgroundColor}`], \"Data \")}\n              <th style=\"border-color: ${this.backgroundColor}\">Total</th>\n            </tr>\n          </thead>\n        `;\n      } else {\n        head += `\n          <thead>\n            <tr>\n              <th style=\"border-color: ${this.backgroundColor}\">Labels</th>\n              ${this.generateMultipleTags(Object.keys(this.data), \"th\", [`border-color: ${this.backgroundColor}`])}\n            </tr>\n          </thead>\n        `;\n      }\n\n      return head;\n    }\n\n    /**\n     * Generate the rows in the graph table body.\n     * @param {Array<Array<Number>>} vals Array of arrays to be drawn as a table.\n     * @param {Array<String>} labels The labels of each row or column.\n     * @param {Boolean} total Option to determine if the table will be totalled or not.\n     * @returns {String}\n     */\n    generateTableBodyRows(vals, labels, total) {\n      let rows = \"\";\n\n      if (total) {\n        vals.forEach((val, index) => {\n          rows += `\n          <tr>\n            <th>${labels[index]}</th>\n            ${this.generateMultipleTags(val, \"td\", [], \"\", \"\", true)}\n            <th>${this.formatValue(this.utility.sumArray(val))}</th>\n          </tr>`;\n        });\n      } else {\n        rows += `\n          <tr>\n            <th>Data</th>\n            ${this.generateMultipleTags(vals.map(val => val[0]), \"td\", [], \"\", \"\", true)}\n          </tr>\n        `;\n      }\n\n      return rows;\n    }\n\n    /**\n     * Generate the body of the graph table.\n     * @returns {String}\n     */\n    generateTableBody() {\n      const columnLength = this.utility.getMaxLength(Object.values(this.data));\n      const labels = Object.keys(this.data);\n      const values = Object.values(this.data);\n      return `\n        <tbody>\n          ${this.generateTableBodyRows(values, labels, columnLength > 1)}\n        </tbody>\n      `;\n    }\n\n    /**\n     * Generate the graph table.\n     * @returns {String}\n     */\n    generateTable() {\n      return `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${this.width}\" height=\"${this.canvasHeight || this.height}\">\n          <style>\n            .graph-table-wrapper {\n              overflow-x: auto;\n            }\n            \n            .graph-table-wrapper > table {\n              width: 100%;\n              border-collapse: collapse;\n              font-family: Arial, Helvetica, sans-serif;\n            }\n            \n            .graph-table-wrapper > table, .graph-table-wrapper > table > thead > tr > th, .graph-table-wrapper > table > tbody > tr > th, .graph-table-wrapper > table > tbody > tr > td {\n              border-bottom: 1px solid #efefef;\n              text-align: left;\n              padding: 0.5em 1em;\n            }\n            \n            .graph-table-wrapper > table > thead > tr > th {\n              height: 25px;\n              border-width: 3px;\n            }\n            \n            .graph-table-wrapper > table > tbody > tr:nth-child(odd) {\n              background-color: rgba(0,0,0,0.1);\n            }\n          </style>\n          <foreignObject x=\"0\" y=\"${this.height}\" width=\"100%\" height=\"100%\">\n            <div class=\"graph-table-wrapper\" xmlns=\"http://www.w3.org/1999/xhtml\">\n              <table style=\"color: ${this.tableTextColor}; background-color: ${this.tableBackgroundColor}; width: ${this.width}\">\n                ${this.generateTableHead()}\n                ${this.generateTableBody()}\n              </table>\n            </div>\n          </foreignObject>\n        </svg>\n      `;\n    }\n\n    /**\n     * Generate and Render the SVG graph into DOM.\n     * @param {Boolean} output\n     * @returns {void | SVGElement}\n     */\n    render(output = true) {\n      this.element.innerHTML = \"\";\n      if (output) this.width = this.element.clientWidth;\n      this.yCoords = [];\n      this.xCoords = [];\n\n      const dom = new DOMParser();\n      const tableElement = dom.parseFromString(this.generateTable(), \"image/svg+xml\").children[0];\n      this.element.appendChild(tableElement);\n      this.tableHeight = this.element.getElementsByTagName(\"table\")[0].clientHeight;\n      tableElement.remove();\n\n      const svg = document.createElement(\"svg\");\n      svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n      svg.setAttribute(\"width\", `${this.width}px`);\n      svg.setAttribute(\"height\", `${this.canvasHeight || this.height}px`);\n      svg.appendChild(this.generateYGrids());\n      svg.appendChild(this.generateXGrids());\n      svg.appendChild(this.drawGraph());\n      svg.appendChild(this.drawNodes(output));\n\n      if (this.showTable) svg.appendChild(tableElement);\n      this.graph = dom.parseFromString(svg.outerHTML, \"image/svg+xml\").children[0];\n\n      if (this.enableLiveEdit || this.enableOptionDropdown) this.element.append(this.initOptionsPanel());\n      this.element.appendChild(this.graph);\n\n      if (this.showTable) {\n        const svgElements = this.element.getElementsByTagName(\"svg\");\n        svgElements[0].setAttribute(\"height\", this.canvasHeight || (`${this.height + this.tableHeight}px`));\n        svgElements[1].setAttribute(\"height\", this.canvasHeight || (`${this.height + this.tableHeight}px`));\n        this.graph = this.element.lastElementChild;\n      }\n\n      this.initToolTips();\n      return this.graph;\n    }\n  }\n\n  /**\n   * GraphUI class.\n   * @class GraphUI\n   * @example new GraphUI({ data, elementId });\n   */\n  class GraphUI {\n    /**\n     * GraphUI constructor.\n     * @param {{}} param0 GraphUI options.\n     * @returns {GraphUI}\n     */\n    constructor({\n      elementId = \"graph\", height = 300, backgroundColor = \"#111\",\n      gridColor = \"rgba(255,255,255,0.1)\", textColor = \"rgba(255,255,255,0.8)\",\n      lineColor = \"rgb(255,255,255)\", nodeColor, nodeStroke, precision = 1,\n      prefix = \"\", suffix = \"\", data = {}, horizontalGrids = 5,\n      showHorizontalGrids = true, showVerticalGrids = false, showYAxisLabel = true,\n      showXAxisLabel = true, showInlineLabel = false, inlineLabelColor,\n      showInlineLabelValueOnly = false, enableOptionDropdown = true, dropdownOptions = \"ALL\",\n      showTable = true, tableBackgroundColor = \"white\", tableTextColor = \"#444\"\n    } = {}) {\n\n      return new GraphUIFactory({\n        elementId, height, backgroundColor, gridColor, textColor, lineColor,\n        nodeColor, nodeStroke, precision, prefix, suffix, data, horizontalGrids,\n        showHorizontalGrids, showVerticalGrids, showYAxisLabel, showXAxisLabel,\n        showInlineLabel, inlineLabelColor, showInlineLabelValueOnly, enableLiveEdit: false,\n        enableOptionDropdown, dropdownOptions, showTable, tableBackgroundColor, tableTextColor\n      });\n    }\n  }\n\n  GraphUI.toSource = () => \"[class GraphUI]\";\n  GraphUI.toString = () => \"class GraphUI { object GraphUI }\";\n  GraphUI.prototype.toSource = GraphUI.toSource;\n  GraphUI.prototype.toString = GraphUI.toString;\n\n  if (typeof root.module !== \"undefined\" && root.module.exports) {\n    root.module.exports = GraphUI;\n  } else {\n    root.GraphUI = GraphUI;\n  }\n})(this);\n"]}